% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/3JSbaseobjects.R
\name{surface3js}
\alias{surface3js}
\title{Add a surface to an r3js object}
\usage{
surface3js(data3js, x, y, z, col = "black", mat, wireframe = FALSE,
  highlight, ...)
}
\arguments{
\item{data3js}{The r3js object to add the surface to.}

\item{x}{Values corresponding to rows of z, or matrix of x coordinates}

\item{y}{Values corresponding to the columns of z, or matrix of y coordinates}

\item{z}{Matrix of heights}

\item{col}{The color of the surface as either a single value, vector or matrix.}

\item{mat}{The material to use when drawing the matrix, for a solid surface the default is
"phong", for a wireframe the default is "line".}

\item{wireframe}{Logical value for if the surface should be displayed as a mesh}

\item{...}{Material and texture properties. See \code{\link{material3js}} for details}
}
\value{
Returns the updated r3js object in the form of a list.
}
\description{
This function behaves very similarly to the \code{surface3d} function in the \code{rgl}
package, although the handling of NA values is more robust in this implementation.
}
\examples{
# Taken from "persp"
data(volcano)

z <- 2 * volcano        # Exaggerate the relief
x <- 10 * (1:nrow(z))   # 10 meter spacing (S to N)
y <- 10 * (1:ncol(z))   # 10 meter spacing (E to W)

zlim <- range(y)
zlen <- zlim[2] - zlim[1] + 1
colorlut <- terrain.colors(zlen) # height color lookup table
col <- colorlut[ z - zlim[1] + 1 ] # assign colors to heights for each point

# Setup r3js plot
data3js <- plot3js.new()
data3js <- plot3js.window(data3js,
                          xlim = range(x),
                          ylim = range(y),
                          zlim = range(z),
                          aspect = c(diff(range(x))/diff(range(y)),
                                     1,
                                     0.5))

# Plot surface
data3js <- surface3js(data3js,
                      x = x,
                      y = y,
                      z = z,
                      col = col)

# Display plot
print(r3js(data3js))

}
